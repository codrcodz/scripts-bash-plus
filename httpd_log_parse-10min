#!/bin/bash
#
### Title ###
## codz's httpd access log parser (10-min increment version) ##
#
### Description ###
## This shell script will parse all the logs within a certain log directory. ##
## You can invoke it with an argument or without; if invoked without, it looks for logs in /var/log/ by default. ##
## In particular: it determines the process name of the service listening on port 80, and searches it's logs ##
## It will first find any access logs that appear to be current (not archived) within the specified log directory. ##
## Next, it will search those log files for all of today's date and time strings in the default httpd/apache2 format. ##
## Lastly, it extracts just the time stamp (excluding date) from each line, dropping the last digit. ##
## The final output is formatted into columns of 10-min increments and total "hits" for each 10-min period throughout the day. ##
#
### Usage ###
## bash $(curl -s https://raw.githubusercontent.com/codrcodz/scripts-bash-plus/master/httpd_log_parse-10min) [/your/httpd/log/directory] ##
#

# Check to see if a log directory was passed to the script before searching for logs.
# If no arguments were passed, find out what is on port 80, and look in /var/log/[http|apache2].
if [ -z "${1}" ]; then
  _http_server=$(while read _port _addr _state _prog_info; do echo "${_prog_info##*\/}"; done \
  <<< $(netstat -plnt | egrep -o ":80[[:blank:]].*/.*")
  _logdir="/var/log/${_http_server}"
elif [ -d "${1}" ]; then
  _logdir="$1"
fi

# Make sure the parsed/assigned directory exists before proceeding.
if [ ! -d "${_logdir}" ]; then
  echo "Invalid Directory"
  exit 1
fi

# Make sure the parsed date is in the log's default date format.
_date=$(date +%d/%b/%Y)

# Find access logs, and find lines from the specified $_date.
# Once those lines are isolated, pull out the first four characters from the time string.
# Append a zero character to the end of the time string; then sort, count, and print into columns.
for _log in $(find ${_logdir} -regex ".*access.*log$"); do
  egrep -o "${_date}:[0-2][0-9](:[0-5][0-9]){2} " ${_log};
done \
| while read _time; do
    printf "${_time: -8:4}0\n";
  done \
  | sort \
  | uniq -c \
  | column -c 72
